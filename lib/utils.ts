import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);

  // Get the user's local time zone and format the date accordingly
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
    timeZone: "Africa/Harare",  // Replace with the desired time zone if needed
  });  

  return `${time} - ${formattedDate}`;
}

// to Detect and Convert URLs to Links: and sanitize

export function convertLinksToClickable(text: string) {
  const urlRegex = /(https?:\/\/[^\s]+)/g; // Regular expression to match URLs
  
  return text.replace(urlRegex, (url) => {
    // Sanitize URL by removing fragments (#) and query parameters (?)
    const sanitizedUrl = sanitizeUrl(url);
    return `<a href="${sanitizedUrl}" target="_blank" class="text-gray-1 hover:underline">${sanitizedUrl}</a>`;
  });
}

function sanitizeUrl(url: string): string {
  try {
    // Create a new URL object for better parsing
    const parsedUrl = new URL(url);

    // Remove query parameters and fragments (if not needed)
    parsedUrl.search = '';  // Removes query string
    parsedUrl.hash = '';    // Removes fragment identifier

    // Rebuild the URL with the sanitized parts
    return parsedUrl.toString();
  } catch (error) {
    // If the URL is invalid, return the original string
    console.error('Invalid URL:', url);
    return url;
  }
}


// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}
